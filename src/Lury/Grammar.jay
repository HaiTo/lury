%{

//
// Grammar.jay / Parser.cs
//
// Author:
//       Tomona Nanase <nanase@users.noreply.github.com>
//
// The MIT License (MIT)
//
// Copyright (c) 2014 Tomona Nanase
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using Lury.Resources;

namespace Lury.Compiling
{
    class Parser
    {
        private int yacc_verbose_flag = 0; 

%}

/* Operator */
%token Lambda

/* Delimiters */
%token NewLine Indent Dedent

/* Keywords */
%token Abstract Class Extends
%token Def Var
%token Property Getter Setter
%token Public Protected Private
%token Me
%token Print PrintLine

/* Operand */
%token Identifier
%token SingleString DoubleString
%token <int> Number

%type <int> Expression

%left '+' '-'
%left '*' '/'

%start Program

%%

Program
    : 
    | StatementList

StatementList
    :
    | StatementList Statement
    | NewLine

Statement
    : PropertyDeclaration
    | FunctionDeclaration
    | ClassDeclaration
    | Decorations
    | Expression

PropertyDeclaration
    : Abstract Accessibility Property Identifier '[' PropertyAccessorList ']'
    | Accessibility Property Identifier '[' PropertyAccessorList ']'
    | Accessibility Property Identifier ':' Suite

PropertyAccessorList
    : PropertyAccessorList ',' PropertyAccessor
    | PropertyAccessor

PropertyAccessor
    : Getter
    | Setter
    | Accessibility Getter
    | Accessibility Setter

FunctionDeclaration
    : Accessibility Def FunctionName ParameterDeclaration ':' Suite
    | Accessibility Def FunctionName ParameterDeclaration Lambda Expression
    | Abstract Accessibility Def FunctionName ParameterDeclaration

FunctionName
    : Me
    | Identifier

ParameterDeclaration
    : 
    | '(' ParameterList ')'

ParameterList
    : 
    | ParameterList ',' Identifier
    | Identifier

ClassDeclaration
    : Abstract Class Identifier ClassExtends ':' Suite
    | Class Identifier ClassExtends ':' Suite

ClassExtends
    : 
    | Extends ClassExtendsList

ClassExtendsList
    : 
    | Identifier ClassExtendsList

Decorations
    : '#' DecorationList

DecorationList
    : Decorator
    | DecorationList Decorator

Decorator
    : Abstract
    | Accessibility

Accessibility
    :
    | Public
    | Protected
    | Private

//

Suite
    : NewLine Indent StatementList Dedent
    | NewLine Indent StatementList NewLine Dedent

//

Expression
    : SingleString
    | DoubleString
    | Identifier
    | Expression '+' Expression
    | Expression '-' Expression
    | Expression '*' Expression
    | Expression '/' Expression
    | '+' Expression
    | '-' Expression
    | '(' Expression ')'
    | Number

%%

    }
