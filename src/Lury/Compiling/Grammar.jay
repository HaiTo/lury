%{

//
// Grammar.jay / Parser.cs
//
// Author:
//       Tomona Nanase <nanase@users.noreply.github.com>
//
// The MIT License (MIT)
//
// Copyright (c) 2014-2015 Tomona Nanase
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using Lury.Resources;
using Lury.Compiling.Elements;

namespace Lury.Compiling
{
    partialã€€class Parser
    {
        private int yacc_verbose_flag = 0;
        private readonly LLVMHelper llvm;
        private readonly LLVMConstHelper llvmch;

        public Parser(LLVMHelper llvm, LLVMConstHelper llvmch)
        {
            this.llvm = llvm;
            this.llvmch = llvmch;
        }

%}

/* Whitespace */
%token NewLine Indent Dedent EndOfFile

/* ContextualKeyword */
%token IdentifierGet IdentifierSet IdentifierFile IdentifierLine IdentifierExit
%token IdentifierSuccess IdentifierFailure

/* Keyword */
%token KeywordAbstract KeywordAnd KeywordBreak KeywordCase KeywordCatch KeywordClass
%token KeywordContinue KeywordDef KeywordDefault KeywordDelete KeywordElif KeywordElse
%token KeywordEnum KeywordExtended KeywordFalse KeywordFinally KeywordFor KeywordIf
%token KeywordImport KeywordIn KeywordInterface KeywordInvariant KeywordIs KeywordLazy
%token KeywordNameof KeywordNew KeywordNil KeywordNot KeywordOr KeywordOut KeywordOverride
%token KeywordPass KeywordPrivate KeywordProperty KeywordProtected KeywordPublic
%token KeywordRef KeywordReflect KeywordReturn KeywordScope KeywordSealed KeywordStatic
%token KeywordSuper KeywordSwitch KeywordThis KeywordThrow KeywordTrue KeywordTry
%token KeywordUnittest KeywordUnless KeywordUntil KeywordVar KeywordWhile KeywordWith
%token KeywordYield

/* Identifier */
%token Identifier

/* Literal */
%token StringLiteral EmbedStringLiteral WysiwygStringLiteral
%token ImaginaryNumber FloatNumber Integer

/* Operator */
%token RangeOpen RangeClose Increment AssignmentAdd Decrement AssignmentSub
%token AnnotationReturn AssignmentConcat AssignmentPower Power AssignmentMultiply
%token AssignmentIntDivide IntDivide AssignmentDivide AssignmentModulo AssignmentLeftShift
%token LeftShift LessThan AssignmentRightShift RightShift MoreThan Equal Lambda NotEqual
%token NotIn IsNot AndShort AssignmentAnd AssignmentXor OrShort AssignmentOr NilCoalesce

//%type <int> Expression

%left  ','
%right '=' AssignmentPower AssignmentMultiply AssignmentDivide AssignmentIntDivide AssignmentModulo AssignmentAdd AssignmentSub AssignmentConcat AssignmentOr AssignmentAnd AssignmentXor AssignmentLeftShift AssignmentRightShift
%right '?' ':' KeywordIf KeywordElse
%left  OrShort KeywordOr
%left  AndShort KeywordAnd
%right '!' KeywordNot
%left  Equal NotEqual '<' '>' LessThan MoreThan KeywordIs IsNot
%left  '|'
%left  '^'
%left  '&'
%left  LeftShift RightShift
%left  '+' '-' '~'
%left  '*' IntDivide '/' '%'
%right Power
%right Increment Decrement
%left  '.'

%start program

%%

program
    :
        {
            $$ = new Program();
        }
    | program_lines
        {
            $$ = new Program($1);
        }

program_lines
    : program_line
        {
            $$ = new ProgramLines($1);
        }
    | program_line program_lines
        {
            $$ = new ProgramLines($1, $2);
        }

program_line
    : statement
        {
            $$ = new ProgramLine($1);
        }
    | NewLine
        {
            $$ = new ProgramLine();
        }


statement
    : statement_list NewLine
        {
            $$ = new StatementStatementList($1);
        }
    | compound_statement
        {
            $$ = new StatementCompound($1);
        }

statement_list
    : simple_statement
        {
            $$ = new StatementList($1);
        }
    | simple_statement simple_statements
        {
            $$ = new StatementList($1, $2);
        }

simple_statements
    : ';'
        {
            $$ = new SimpleStatements();
        }
    | ';' simple_statement simple_statements
        {
            $$ = new SimpleStatements($2, $3);
        }

compound_statement
    : if_statement
    | while_statement
    | function_definition
    | class_definition

suite
    : statement_list NewLine
        {
            $$ = new StatementListSuite($1);
        }
    | NewLine Indent statements Dedent
        {
            $$ = new StatementsSuite($3);
        }

statements
    : statement
        {
            $$ = new Statements($1);
        }
    | statement statements
        {
            $$ = new Statements($1, $2);
        }


if_statement
    : KeywordIf expression ':' suite
        {
            $$ = new IfStatement($1, $2, $4);
        }
    | KeywordIf expression ':' suite elif_statements
        {
            $$ = new IfStatement($1, $2, $4, $5);
        }

elif_statements
    : KeywordElif expression ':' suite
        {
            $$ = new ElifStatement($1, $2, $4);
        }
    | KeywordElif expression ':' suite elif_statements
        {
            $$ = new ElifStatement($1, $2, $4, $5);
        }
    | else_statement
        {
            $$ = new ElifStatement($1);
        }

else_statement
    : KeywordElse ':' suite
        {
            $$ = new ElseStatement($1, $3);
        }

while_statement
    : KeywordWhile expression ':' suite
        {
            $$ = new WhileStatement($1, $2, $4);
        }
    | KeywordWhile expression ':' suite else_statement
        {
            $$ = new WhileStatement($1, $2, $4, $5);
        }

function_definition
    : KeywordDef function_name '(' parameter_list ')' ':' suite
        {
            $$ = new FunctionDefinition($1, $2, $4, $7);
        }
    | KeywordDef function_name ':' suite
        {
            $$ = new FunctionDefinition($1, $2, $4);
        }

function_name
    : identifier_all
        {
            $$ = new FunctionName($1);
        }
    | function_name '.' identifier_all
        {
            $$ = new FunctionName($1, $3);
        }

parameter_list
    : parameter
        {
            $$ = new FunctionParameterList($1);
        }
    | parameter_list ',' parameter
        {
            $$ = new FunctionParameterList($1, $3);
        }

parameter
    : identifier_all

class_definition
    : KeywordClass class_name '(' inheritance_list ')' ':' suite
        {
            $$ = new ClassDefinition($1, $2, $4, $7);
        }
    | KeywordClass class_name ':' suite
        {
            $$ = new ClassDefinition($1, $2, $4);
        }

class_name
    : identifier_all

inheritance_list
    : object_name
        {
            $$ = new InheritanceList($1);
        }
    | inheritance_list ',' object_name
        {
            $$ = new InheritanceList($1, $3);
        }

object_name
    : identifier_all
        {
            $$ = new ObjectName($1);
        }
    | object_name '.' identifier_all
        {
            $$ = new ObjectName($1, $3);
        }


simple_statement
    : pass_statement
    | expression_statement
    | return_statement
    | break_statement
    | continue_statement
    | import_statement

pass_statement
    : KeywordPass
        {
            $$ = new PassStatement($1);
        }

expression_statement
    : expression
        {
            $$ = new ExpressionStatement($1);
        }

return_statement
    : KeywordReturn
        {
            $$ = new ReturnStatement($1);
        }
    | KeywordReturn expression
        {
            $$ = new ReturnStatement($1, $2);
        }

break_statement
    : KeywordBreak
        {
            $$ = new BreakStatement($1);
        }

continue_statement
    : KeywordContinue
        {
            $$ = new ContinueStatement($1);
        }

import_statement
    : KeywordImport import_names
        {
            $$ = new ImportStatement($2);
        }
    | KeywordPublic KeywordImport import_names
        {
            $$ = new ImportStatement($3);
        }

import_names
    : import_name
        {
            $$ = new ImportName($1);
        }
    | import_names ',' import_name
        {
            $$ = new ImportName($1, $3);
        }

import_name
    : module_name

module_name
    : identifier_all
        {
            $$ = new ModuleName($1);
        }
    | module_name '.' identifier_all
        {
            $$ = new ModuleName($1, $3);
        }

identifier_all
    : Identifier
    | contextual_keyword

contextual_keyword
    : IdentifierGet
    | IdentifierSet
    | IdentifierFile
    | IdentifierLine
    | IdentifierExit
    | IdentifierSuccess
    | IdentifierFailure


expression
    : comma_expression
        {
            $$ = new ExpressionComma($1);
        }

comma_expression
    : assignment_expression
        {
            $$ = new CommaExpression($1);
        }
    | assignment_expression ',' comma_expression
        {
            $$ = new CommaExpressionComma($1, $3);
        }

assignment_expression 
    : conditional_expression
        {
            $$ = new AssignmentExpression($1);
        }
    | conditional_expression '=' assignment_expression
        {
            $$ = new AssignmentExpressionAssignment($1, $3);
        }
    | conditional_expression AssignmentAdd assignment_expression
        {
            $$ = new AssignmentExpressionAdd($1, $3);
        }
    | conditional_expression AssignmentSub assignment_expression
        {
            $$ = new AssignmentExpressionSub($1, $3);
        }
    | conditional_expression AssignmentMultiply assignment_expression
        {
            $$ = new AssignmentExpressionMultiply($1, $3);
        }
    | conditional_expression AssignmentDivide assignment_expression
        {
            $$ = new AssignmentExpressionDivide($1, $3);
        }
    | conditional_expression AssignmentIntDivide assignment_expression
        {
            $$ = new AssignmentExpressionIntDivide($1, $3);
        }
    | conditional_expression AssignmentPower assignment_expression
        {
            $$ = new AssignmentExpressionPower($1, $3);
        }
    | conditional_expression AssignmentModulo assignment_expression
        {
            $$ = new AssignmentExpressionModulo($1, $3);
        }
    | conditional_expression AssignmentAnd assignment_expression
        {
            $$ = new AssignmentExpressionAnd($1, $3);
        }
    | conditional_expression AssignmentOr assignment_expression
        {
            $$ = new AssignmentExpressionOr($1, $3);
        }
    | conditional_expression AssignmentXor assignment_expression
        {
            $$ = new AssignmentExpressionXor($1, $3);
        }
    | conditional_expression AssignmentConcat assignment_expression
        {
            $$ = new AssignmentExpressionConcat($1, $3);
        }
    | conditional_expression AssignmentLeftShift assignment_expression
        {
            $$ = new AssignmentExpressionLeftShift($1, $3);
        }
    | conditional_expression AssignmentRightShift assignment_expression
        {
            $$ = new AssignmentExpressionRightShift($1, $3);
        }

conditional_expression
    : bool_or_expression
        {
            $$ = new ConditionalExpression($1);
        }
    | bool_or_expression '?' bool_or_expression ':' bool_or_expression
        {
            $$ = new ConditionalExpressionConditional($1, $3, $5);
        }
    | bool_or_expression KeywordIf bool_or_expression KeywordElse bool_or_expression
        {
            $$ = new ConditionalExpressionIf($1, $3, $5);
        }

bool_or_expression
    : bool_and_expression
        {
            $$ = new BoolOrExpressionAnd($1);
        }
    | bool_or_expression KeywordOr bool_and_expression
        {
            $$ = new BoolOrExpressionOr($1, $2, $3);
        }
    | bool_or_expression OrShort bool_and_expression
        {
            $$ = new BoolOrExpressionOr($1, $2, $3);
        }

bool_and_expression
    : bool_not_expression
        {
            $$ = new BoolAndExpressionNot($1);
        }
    | bool_and_expression KeywordAnd bool_not_expression
        {
            $$ = new BoolAndExpressionAnd($1, $2, $3);
        }
    | bool_and_expression AndShort bool_not_expression
        {
            $$ = new BoolAndExpressionAnd($1, $2, $3);
        }

bool_not_expression
    : comparison_expression
        {
            $$ = new BoolNotExpressionComparison($1);
        }
    | KeywordNot bool_not_expression
        {
            $$ = new BoolNotExpressionNot($1, $2);
        }
    | '!' bool_not_expression
        {
            $$ = new BoolNotExpressionNot($1, $2);
        }

comparison_expression
    : or_expression
        {
            $$ = new ComparisonExpressionOr($1);
        }
    | or_expression comparison_operator or_expression
        {
            $$ = new ComparisonExpressionComparison($1, $2, $3);
        }

comparison_operator
    : '<'
        {
            $$ = new ComparisonOperator($1, ComparisonType.LessThan);
        }
    | '>'
        {
            $$ = new ComparisonOperator($1, ComparisonType.MoreThan);
        }
    | Equal
        {
            $$ = new ComparisonOperator($1, ComparisonType.Equal);
        }
    | LessThan
        {
            $$ = new ComparisonOperator($1, ComparisonType.LessThanEqual);
        }
    | MoreThan
        {
            $$ = new ComparisonOperator($1, ComparisonType.MoreThanEqual);
        }
    | NotEqual
        {
            $$ = new ComparisonOperator($1, ComparisonType.NotEqual);
        }
    | KeywordIs
        {
            $$ = new ComparisonOperator($1, ComparisonType.Is);
        }
    | IsNot
        {
            $$ = new ComparisonOperator($1, ComparisonType.IsNot);
        }
    | KeywordIs KeywordNot
        {
            $$ = new TwoComparisonOperator($1, $2, ComparisonType.IsNot);
        }

or_expression
    : xor_expression
        {
            $$ = new OrExpressionXor($1);
        }
    | or_expression '|' xor_expression
        {
            $$ = new OrExpressionOr($1, $3);
        }

xor_expression
    : and_expression
        {
            $$ = new XorExpressionAnd($1);
        }
    | xor_expression '^' and_expression
        {
            $$ = new XorExpressionXor($1, $3);
        }

and_expression
    : shift_expression
        {
            $$ = new AndExpressionShift($1);
        }
    | and_expression '&' shift_expression
        {
            $$ = new AndExpressionAnd($1, $3);
        }

shift_expression
    : addition_expression
        {
            $$ = new ShiftExpressionAddition($1);
        }
    | shift_expression LeftShift addition_expression
        {
            $$ = new ShiftExpressionLeft($1, $3);
        }
    | shift_expression RightShift addition_expression
        {
            $$ = new ShiftExpressionRight($1, $3);
        }

addition_expression
    : multiplication_expression
        {
            $$ = new AdditionExpressionMultiplication($1);
        }
    | addition_expression '+' multiplication_expression
        {
            $$ = new AdditionExpressionRecursiveAddition($1, $3);
        }
    | addition_expression '-' multiplication_expression
        {
            $$ = new AdditionExpressionRecursiveSubtraction($1, $3);
        }
    | addition_expression '~' multiplication_expression
        {
            $$ = new AdditionExpressionRecursiveConcatenation($1, $3);
        }

multiplication_expression 
    : unary_expression
        {
            $$ = new MultiplicationExpressionUnary($1);
        }
    | multiplication_expression '*' unary_expression
        {
            $$ = new MultiplicationExpressionMultiplication($1, $3);
        }
    | multiplication_expression IntDivide unary_expression
        {
            $$ = new MultiplicationExpressionIntDivision($1, $3);
        }
    | multiplication_expression '/' unary_expression
        {
            $$ = new MultiplicationExpressionDivision($1, $3);
        }
    | multiplication_expression '%' unary_expression
        {
            $$ = new MultiplicationExpressionModulo($1, $3);
        }

unary_expression
    : power_expression
        {
            $$ = new UnaryExpressionPower($1);
        }
    | Increment unary_expression
        {
            $$ = new UnaryExpressionIncrement($1);
        }
    | Decrement unary_expression
        {
            $$ = new UnaryExpressionDecrement($1);
        }
    | '-' unary_expression
        {
            $$ = new UnaryExpressionMinus($1);
        }
    | '+' unary_expression
        {
            $$ = new UnaryExpressionPlus($1);
        }
    | '~' unary_expression
        {
            $$ = new UnaryExpressionInvert($1);
        }

power_expression
    : postfix_expression
        {
            $$ = new PowerExpressionPostfix($1);
        }
    | power_expression Power postfix_expression
        {
            $$ = new PowerExpressionPower($1, $3);
        }

postfix_expression
    : primary
        {
            $$ = new PostfixExpressionPrimary($1);
        }
    | postfix_expression '.' identifier_all
        {
            $$ = new PostfixExpressionDot($1, $3);
        }
    | postfix_expression Increment
        {
            $$ = new PostfixExpressionIncrement($1);
        }
    | postfix_expression Decrement
        {
            $$ = new PostfixExpressionDecrement($1);
        }
    | postfix_expression '(' ')'
        {
            $$ = new PostfixExpressionCallNoArg($1);
        }
    | postfix_expression '(' argument_list ')'
        {
            $$ = new PostfixExpressionCall($1, $3);
        }

argument_list
    : argument
        {
            $$ = new CallArgumentList($1);
        }
    | argument ',' argument_list
        {
            $$ = new CallArgumentList($1, $3);
        }

argument
    : assignment_expression
        {
            $$ = new CallArgument($1);
        }
    | named_argument

named_argument
    : identifier_all ':' expression
        {
            $$ = new NamedCallArgument($1, $3);
        }

primary
    : identifier_all
        {
            $$ = new Identifier($1);
        }
    | literal
    | KeywordTrue
        {
            $$ = new BooleanLiteral($1, true);
        }
    | KeywordFalse
        {
            $$ = new BooleanLiteral($1, false);
        }
    | KeywordNil
        {
            $$ = new NilLiteral($1);
        }
    | KeywordThis
        {
            $$ = new ThisLiteral($1);
        }
    | KeywordSuper
        {
            $$ = new SuperLiteral($1);
        }
    | '(' expression ')'
        {
            $$ = new ExpressionPrimary($2);
        }

literal
    : StringLiteral
        {
            $$ = new StringLiteral($1, '\'');
        }
    | EmbedStringLiteral
        {
            $$ = new StringLiteral($1, '"');
        }
    | WysiwygStringLiteral
        {
            $$ = new StringLiteral($1, '`');
        }
    | ImaginaryNumber
        {
            $$ = new ImaginaryNumberLiteral($1);
        }
    | FloatNumber
        {
            $$ = new FloatingNumberLiteral($1);
        }
    | Integer
        {
            $$ = new IntegerLiteral($1);
        }
    
%%

    }
